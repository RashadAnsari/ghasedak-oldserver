syntax = "proto3";

package ir.sndu.server;

option (scalapb.options) = {
    flat_package: true
    import: "ir.sndu.server.CoreTypeMapper._"
    primitive_wrappers: true
    single_file: true
    preamble: "trait GroupCommand"
//    preamble: "sealed trait GroupCommand { val replyTo:ir.sndu.server.ActorRefContainer } "
    preamble: "trait GroupQuery"
};

import "google/protobuf/wrappers.proto";
import "scalapb/scalapb.proto";
import "api/groups.proto";

message GroupCommands {
    message Create {
        option (scalapb.message).extends = "GroupCommand";

        int32 typ = 1;
        int32 creator_user_id = 2;
        int64 creator_auth_id = 3;
        string title = 4;
        int64 random_id = 5;
        repeated int32 user_ids = 6;
        string reply_to = 7 [(scalapb.field).type = "ir.sndu.server.ActorRefContainer"];
    }

    message CreateAck {
        int64 access_hash = 1;
    }


    message DeleteGroup {
        option (scalapb.message).extends = "GroupCommand";

        int32 client_user_id = 1;
        int64 client_auth_id = 2;
    }

    message Invite {
        option (scalapb.message).extends = "GroupCommand";

        int32 invitee_user_id = 1;
        int32 inviter_user_id = 2;
        int64 inviter_auth_id = 3;
        int64 random_id = 4;
    }

    message Kick {
        option (scalapb.message).extends = "GroupCommand";

        int32 kicked_user_id = 1;
        int32 kicker_user_id = 2;
        int64 kicker_auth_id = 3;
        int64 random_id = 4;
    }

}
