syntax = "proto3";


package ir.sndu.server.group;

option (scalapb.options) = {
    flat_package: true
    import: "ir.sndu.server.CoreTypeMapper._"
    primitive_wrappers: true
    single_file: true
    preamble: "trait GroupCommand"
//    preamble: "sealed trait GroupCommand { val replyTo:ir.sndu.server.ActorRefContainer } "
    preamble: "trait GroupQuery"
};

import "google/protobuf/wrappers.proto";
import "scalapb/scalapb.proto";

enum GroupType {
    General = 0;
    SuperGroup = 1;
    Channel = 2;
}

message GroupExt {
    string key = 1;
    oneof value {
        string string_value = 2;
        bool bool_value = 3;
    }
}

message GroupEvents {
    message Created {
        option (scalapb.message).extends = "ir.sndu.server.group.GroupEvent";

        int64 ts = 1 [(scalapb.field).type = "java.time.Instant"];
        int32 group_id = 2;
        GroupType typ = 3;
        int32 creator_user_id = 4;
        int64 access_hash = 5;
        string title = 6;
        repeated int32 user_ids = 7;
    }
}


message GroupMember {
    int32 user_id = 1;
    int32 inviter_user_id = 2;
    int64 invited_at = 3;
    bool is_admin = 4;
}


message GroupCommands {
    message Create {
        option (scalapb.message).extends = "GroupCommand";

        int32 typ = 1;
        int32 creator_user_id = 2;
        int64 creator_auth_id = 3;
        string title = 4;
        int64 random_id = 5;
        repeated int32 user_ids = 6;
        string reply_to = 7 [(scalapb.field).type = "ir.sndu.server.ActorRefContainer"];
    }

    message CreateAck {
        int64 access_hash = 1;
    }
}