syntax = "proto3";

package im.ghasedak.rpc;

option java_package = "im.ghasedak.rpc.messaging";
option java_multiple_files = true;
option (scalapb.options) = {
  flat_package: true
};

import "scalapb/scalapb.proto";
import "api/messaging.proto";
import "api/peer.proto";

service MessagingService {
    rpc SendMessage (RequestSendMessage) returns (ResponseVoid) {
    }
    rpc LoadDialogs (RequestLoadDialogs) returns (ResponseLoadDialogs) {
    }
    rpc LoadHistory (RequestLoadHistory) returns (ResponseLoadHistory) {
    }
    rpc MessageReceived (RequestMessageReceived) returns (ResponseVoid) {
    }
    rpc MessageRead (RequestMessageRead) returns (ResponseVoid) {
    }
}

message RequestSendMessage {
    im.ghasedak.api.ApiPeer peer = 1; // Destination peer for message
    int64 random_id = 2; // Message random id (generated on client side)
    im.ghasedak.api.ApiMessage message = 3; // The message
}

message ResponseVoid {
}

message RequestLoadDialogs {
    int64 min_date = 1; // start date of conversation loading. Use 0 to load latest messages
    int32 limit = 2; // limit maximum amount of messages (max is 10)
}

message ResponseLoadDialogs {
    repeated im.ghasedak.api.ApiDialog dialogs = 1;
}

message RequestLoadHistory {
    im.ghasedak.api.ApiPeer peer = 1; // Peer of conversation
    int32 sequence_nr = 2; // start sequence number of messages for loading. Int.Max for loading from recent message
    im.ghasedak.api.ApiListLoadMode load_mode = 3; // Loading mode: Forward loading, backward or both ways
    int32 limit = 4; // maximum amount of messages (max is 100)
}

message ResponseLoadHistory {
    repeated im.ghasedak.api.ApiMessageContainer history = 1; // Messages
}

message RequestMessageReceived {
    im.ghasedak.api.ApiPeer peer = 1; // Destination peer
    int32 sequence_nr = 2; // Maximum sequence number of received messages
}

message RequestMessageRead {
    im.ghasedak.api.ApiPeer peer = 1; // Destination peer
    int32 sequence_nr = 2; // Maximum sequence number of received messages
}